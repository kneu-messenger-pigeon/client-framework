// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	models "github.com/kneu-messenger-pigeon/client-framework/models"
	mock "github.com/stretchr/testify/mock"
)

// MessageComposerInterface is an autogenerated mock type for the MessageComposerInterface type
type MessageComposerInterface struct {
	mock.Mock
}

// ComposeDisciplineScoresMessage provides a mock function with given fields: messageData
func (_m *MessageComposerInterface) ComposeDisciplineScoresMessage(messageData models.DisciplinesScoresMessageData) (error, string) {
	ret := _m.Called(messageData)

	var r0 error
	var r1 string
	if rf, ok := ret.Get(0).(func(models.DisciplinesScoresMessageData) (error, string)); ok {
		return rf(messageData)
	}
	if rf, ok := ret.Get(0).(func(models.DisciplinesScoresMessageData) error); ok {
		r0 = rf(messageData)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(models.DisciplinesScoresMessageData) string); ok {
		r1 = rf(messageData)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// ComposeDisciplinesListMessage provides a mock function with given fields: messageData
func (_m *MessageComposerInterface) ComposeDisciplinesListMessage(messageData models.DisciplinesListMessageData) (error, string) {
	ret := _m.Called(messageData)

	var r0 error
	var r1 string
	if rf, ok := ret.Get(0).(func(models.DisciplinesListMessageData) (error, string)); ok {
		return rf(messageData)
	}
	if rf, ok := ret.Get(0).(func(models.DisciplinesListMessageData) error); ok {
		r0 = rf(messageData)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(models.DisciplinesListMessageData) string); ok {
		r1 = rf(messageData)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// ComposeLogoutFinishedMessage provides a mock function with given fields:
func (_m *MessageComposerInterface) ComposeLogoutFinishedMessage() (error, string) {
	ret := _m.Called()

	var r0 error
	var r1 string
	if rf, ok := ret.Get(0).(func() (error, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// ComposeScoreChanged provides a mock function with given fields: messageData
func (_m *MessageComposerInterface) ComposeScoreChanged(messageData models.ScoreChangedMessageData) (error, string) {
	ret := _m.Called(messageData)

	var r0 error
	var r1 string
	if rf, ok := ret.Get(0).(func(models.ScoreChangedMessageData) (error, string)); ok {
		return rf(messageData)
	}
	if rf, ok := ret.Get(0).(func(models.ScoreChangedMessageData) error); ok {
		r0 = rf(messageData)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(models.ScoreChangedMessageData) string); ok {
		r1 = rf(messageData)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// ComposeWelcomeAnonymousMessage provides a mock function with given fields: messageData
func (_m *MessageComposerInterface) ComposeWelcomeAnonymousMessage(messageData models.WelcomeAnonymousMessageData) (error, string) {
	ret := _m.Called(messageData)

	var r0 error
	var r1 string
	if rf, ok := ret.Get(0).(func(models.WelcomeAnonymousMessageData) (error, string)); ok {
		return rf(messageData)
	}
	if rf, ok := ret.Get(0).(func(models.WelcomeAnonymousMessageData) error); ok {
		r0 = rf(messageData)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(models.WelcomeAnonymousMessageData) string); ok {
		r1 = rf(messageData)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// ComposeWelcomeAuthorizedMessage provides a mock function with given fields: messageData
func (_m *MessageComposerInterface) ComposeWelcomeAuthorizedMessage(messageData models.UserAuthorizedMessageData) (error, string) {
	ret := _m.Called(messageData)

	var r0 error
	var r1 string
	if rf, ok := ret.Get(0).(func(models.UserAuthorizedMessageData) (error, string)); ok {
		return rf(messageData)
	}
	if rf, ok := ret.Get(0).(func(models.UserAuthorizedMessageData) error); ok {
		r0 = rf(messageData)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(models.UserAuthorizedMessageData) string); ok {
		r1 = rf(messageData)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// SetPostFilter provides a mock function with given fields: filter
func (_m *MessageComposerInterface) SetPostFilter(filter func(string) string) {
	_m.Called(filter)
}

type mockConstructorTestingTNewMessageComposerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessageComposerInterface creates a new instance of MessageComposerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessageComposerInterface(t mockConstructorTestingTNewMessageComposerInterface) *MessageComposerInterface {
	mock := &MessageComposerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
