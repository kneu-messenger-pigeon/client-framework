// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	models "github.com/kneu-messenger-pigeon/client-framework/models"
	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *UserRepositoryInterface) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClientUserIds provides a mock function with given fields: studentId
func (_m *UserRepositoryInterface) GetClientUserIds(studentId uint) []string {
	ret := _m.Called(studentId)

	var r0 []string
	if rf, ok := ret.Get(0).(func(uint) []string); ok {
		r0 = rf(studentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetStudent provides a mock function with given fields: clientUserId
func (_m *UserRepositoryInterface) GetStudent(clientUserId string) *models.Student {
	ret := _m.Called(clientUserId)

	var r0 *models.Student
	if rf, ok := ret.Get(0).(func(string) *models.Student); ok {
		r0 = rf(clientUserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Student)
		}
	}

	return r0
}

// SaveUser provides a mock function with given fields: clientUserId, student
func (_m *UserRepositoryInterface) SaveUser(clientUserId string, student *models.Student) error {
	ret := _m.Called(clientUserId, student)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.Student) error); ok {
		r0 = rf(clientUserId, student)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepositoryInterface(t mockConstructorTestingTNewUserRepositoryInterface) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
